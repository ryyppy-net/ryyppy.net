<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
          http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <!--
        *** Database configuration files ***
            jdbc-dev.properties points to local development settings.
            jdbc.properties points to production settings and those override values in development files.
            In production you have to find a way to get the jdbc.properties file to the classpath
            Alternatively you can set system properties that override the settings in these properties files
            Maybe this setup could be replaced with jndi?
        -->
        <property name="locations">
            <list>
                <value>classpath:drinkcounter/general-configuration.properties</value>
                <value>classpath:drinkcounter/jdbc.properties</value>
            </list>
        </property>
    </bean>
    <context:component-scan base-package="drinkcounter"/>
    <jpa:repositories base-package="drinkcounter.dao" />
    <bean id="partyMarshaller" class="drinkcounter.util.PartyMarshaller" />
    <bean id="authenticationChecks" class="drinkcounter.authentication.AuthenticationChecks" />

    <!-- Database settings -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
            </props>
        </property>
        <property name="persistenceUnitName" value="defaultPersistence"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="10" />
        <property name="initialSize" value="10" />
    </bean>

    <!-- Transactions -->
    <tx:annotation-driven/>
    <bean id="transactionManager"
            class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- Scheduling and tasks -->
    <task:annotation-driven/>

</beans>
